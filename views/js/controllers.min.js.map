{"version":3,"sources":["routes.js","../component/listing/tpl/element!tpl","../component/listing/css/element!css","../component/listing/element.js","../component/listing/tpl/report!tpl","../component/listing/css/report!css","../component/listing/report.js","../component/listing/tpl/list!tpl","../component/listing/tpl/elementWrapper!tpl","../component/listing/css/list!css","../component/listing/list.js","../component/manager/tpl/manager!tpl","../component/manager/css/manager!css","../component/manager/manager.js","../model/taskQueueModel.js","../model/taskQueue.js","main.js","../../../../../../../../../../onLayerEnd0.js"],"names":["define","Main","actions","index","hb","template","Handlebars","depth0","helpers","partials","data","this","compilerInfo","merge","stack1","helper","options","buffer","functionType","escapeExpression","helperMissing","status","call","hash","icon","taskLabel","time","__","$","_","moment","component","hider","elementTpl","_defaults","_allowedStatus","_categoryMap","import","export","delivery_comp","transfer","create","update","delete","_statusIcon","in_progress","completed","failed","getLabelString","getFormattedTime","from","elapsed","unix","parseInt","getTimeString","createdAt","createdAtElapsed","updatedAt","updatedAtElapsed","getIcon","isPlainObject","Error","category","taskElementApi","getId","id","getStatus","getData","$container","getElement","assign","find","removeAttr","addClass","html","setStatus","toggle","hasFile","trigger","highlight","delay","removeClass","self","indexOf","is","forEach","without","st","setState","config","initConfig","defaults","setTemplate","on","$component","click","init","reportFactory","reportElementApi","report","isArray","children","length","replace","render","title","emptyText","listElementFactory","listTpl","elementWrapperTpl","listApi","removeElement","listElement","destroy","remove","insertElement","$li","prepend","setDetail","detailElement","show","hideDetail","scrollToTop","get","scrollTo","animateInsertion","$listElement","parent","e","preventDefault","badgeFactory","makeAlignable","makeAbsorbable","makePulsable","reportElementFactory","taskListFactory","managerTpl","getBadgeDataFromStatus","tasksStatuses","total","loading","numberOfTasksInProgress","type","numberOfTasksCompleted","numberOfTasksFailed","value","getBadgeDataFromElements","elements","statusMap","created","stats","element","_alignementConfig","initial","hPos","hOrigin","vPos","vOrigin","hOffset","showDetail","taskQueue","getTaskElements","taskElements","taskData","list","reportElement","alignWith","addNewTask","animate","taskId","selfUpdateBadge","badgeData","badge","loadData","tasksData","found","entry","push","difference","keys","pulse","removeAllFinished","filter","selfUpdateClearButton","$clearAllBox","finishedCount","map","size","hide","document","off","target","contains","$trigger","moveBy","stopPropagation","Promise","eventifier","polling","request","hasSameState","task1","task2","url","archive","all","download","pollSingleIntervals","iteration","interval","pollAllIntervals","model","_cache","singlePollings","getPollSingleIntervals","cloneDeep","getPollAllIntervals","setEndpoints","urls","TypeError","then","reject","catch","err","getAll","limit","newCache","task","res","pollAll","immediate","loop","pollingIntervals","_updateInterval","pollingInstance","pollingInterval","shift","setInterval","globalPolling","start","action","statusArr","done","async","taskDataArray","resolve","next","pollAllStop","stop","pollSingle","poll","finished","pollSingleStop","taskCreate","creationResult","result","extra","fileDownload","httpMethod","successCallback","failCallback","urlHelper","taskQueueModelFactory","route","taskQueueManagerFactory","taskManager","absorbBurst","sourceDom","tasks","c","d","a","i","s","createElement","getElementsByTagName","cssText","createTextNode"],"mappings":"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","file":"routes.js","sourcesContent":["/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n *\r\n */\r\ndefine('taoTaskQueue/controller/routes',[],function(){\r\n    'use strict';\r\n\r\n    return {\r\n        'Main': {\r\n            'actions' : {\r\n                'index' : 'taoTaskQueue/controller/main'\r\n            }\r\n        }\r\n    };\r\n});\n","\ndefine('tpl!taoTaskQueue/component/listing/tpl/element', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"task-element \";\n  if (helper = helpers.status) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.status); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n    <div class=\\\"container-icon\\\">\\r\\n        <div class=\\\"shape\\\">\\r\\n            <span class=\\\"\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"/>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"container-text\\\">\\r\\n        <div class=\\\"label\\\">\";\n  if (helper = helpers.taskLabel) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.taskLabel); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\r\\n        <div class=\\\"time\\\">\";\n  if (helper = helpers.time) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.time); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\r\\n    </div>\\r\\n    <div class=\\\"action-group action-top\\\">\\r\\n        <span data-role=\\\"remove\\\" class=\\\"icon-result-nok\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"remove\", options) : helperMissing.call(depth0, \"__\", \"remove\", options)))\n    + \"\\\"/>\\r\\n    </div>\\r\\n    <div class=\\\"action-group action-bottom\\\">\\r\\n        <span data-role=\\\"notify\\\" class=\\\"icon-preview\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"notify me when done\", options) : helperMissing.call(depth0, \"__\", \"notify me when done\", options)))\n    + \"\\\"/>\\r\\n        <span data-role=\\\"download\\\" class=\\\"icon-download\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"download\", options) : helperMissing.call(depth0, \"__\", \"download\", options)))\n    + \"\\\"/>\\r\\n        <span data-role=\\\"report\\\" class=\\\"icon-document\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"see report\", options) : helperMissing.call(depth0, \"__\", \"see report\", options)))\n    + \"\\\"/>\\r\\n    </div>\\r\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoTaskQueue/component/listing/css/element',[],function(){});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\ndefine('taoTaskQueue/component/listing/element',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'moment',\r\n    'ui/component',\r\n    'ui/hider',\r\n    'tpl!taoTaskQueue/component/listing/tpl/element',\r\n    'css!taoTaskQueue/component/listing/css/element'\r\n], function ($, _, __, moment, component, hider, elementTpl) {\r\n    'use strict';\r\n\r\n    var _defaults = {\r\n    };\r\n\r\n    var _allowedStatus = ['in_progress', 'failed', 'completed'];\r\n\r\n    var _categoryMap = {\r\n        import : 'import',\r\n        export : 'export',\r\n        delivery_comp : 'delivery',\r\n        transfer : 'connect',\r\n        create : 'magicwand',\r\n        update : 'edit',\r\n        delete : 'bin'\r\n    };\r\n\r\n    var _statusIcon = {\r\n        in_progress : 'property-advanced',\r\n        completed: 'result-ok',\r\n        failed: 'result-nok',\r\n    };\r\n\r\n    /**\r\n     * Get the task name to be displayed to the user\r\n     * @param {Object} data - the standard task object\r\n     * @returns {String}\r\n     */\r\n    var getLabelString = function getLabelString(data){\r\n        return data.taskLabel;\r\n    };\r\n\r\n    /**\r\n     * Get the formatted duration string\r\n     * @param {Number} from - the start time in unix timestamp\r\n     * @param {Number} elapsed - the duration in seconds\r\n     * @returns {Number}\r\n     */\r\n    var getFormattedTime = function getFormattedTime(from, elapsed){\r\n        return moment.unix(from).from(moment.unix(parseInt(from, 10)+parseInt(elapsed, 10)));\r\n    };\r\n\r\n    /**\r\n     * Get the formatted time string according to the current task data\r\n     * @param data - the standard task object\r\n     * @returns {String}\r\n     */\r\n    var getTimeString = function getTimeString(data){\r\n        switch(data.status){\r\n            case 'created':\r\n            case 'in_progress':\r\n                return __('Started %s', getFormattedTime(data.createdAt, data.createdAtElapsed));\r\n            case 'completed':\r\n                return __('Completed %s', getFormattedTime(data.updatedAt, data.updatedAtElapsed));\r\n            case 'failed':\r\n                return __('Failed %s', getFormattedTime(data.updatedAt, data.updatedAtElapsed));\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the appropriate icon according to the task data\r\n     * @param {Object} data - the standard task object\r\n     * @returns {string}\r\n     */\r\n    var getIcon = function getIcon(data){\r\n        var icon;\r\n        if(!_.isPlainObject(data)){\r\n            throw new Error('invalid data');\r\n        }\r\n        if(data.category && _categoryMap[data.category]){\r\n            icon = _categoryMap[data.category];\r\n        }else if(data.status && _statusIcon[data.status]){\r\n            icon = _statusIcon[data.status];\r\n        }else {\r\n            icon = _statusIcon.in_progress;\r\n        }\r\n        return 'icon-'+icon;\r\n    };\r\n\r\n    var taskElementApi = {\r\n\r\n        /**\r\n         * Get the id of the task element\r\n         * @returns {String}\r\n         */\r\n        getId : function getId(){\r\n            if(this.data && this.data.id){\r\n                return this.data.id;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the status of the task element\r\n         * @returns {String}\r\n         */\r\n        getStatus : function getStatus(){\r\n            if(this.data && this.data.status){\r\n                return this.data.status;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the data of the task element\r\n         * @returns {Object}\r\n         */\r\n        getData : function getData(){\r\n            return this.data;\r\n        },\r\n\r\n        /**\r\n         * Update the data and rendering of it\r\n         * @param data\r\n         * @returns {taskElement}\r\n         */\r\n        update : function update(data){\r\n            var $container = this.getElement();\r\n\r\n            _.assign(this.data || {}, data);\r\n\r\n            $container.find('.shape > span').removeAttr('class').addClass(getIcon(this.data));\r\n            $container.find('.label').html(getLabelString(this.data));\r\n            $container.find('.time').html(getTimeString(this.data));\r\n\r\n            this.setStatus(this.data.status);\r\n            //bonus: check if there is any report and display the report button only when needed\r\n\r\n            hider.toggle($container.find('.action-bottom [data-role=\"download\"]'), this.data.hasFile);\r\n\r\n            this.trigger('update');\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add transition to highlight the element (useful after an update for instance)\r\n         * @returns {taskElement}\r\n         */\r\n        highlight : function highlight(){\r\n            var $container = this.getElement();\r\n            $container.addClass('highlight');\r\n            _.delay(function(){\r\n                $container.removeClass('highlight');\r\n            }, 500);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set the status of the task element\r\n         * @param {String} status\r\n         * @returns {taskElement}\r\n         */\r\n        setStatus : function setStatus(status){\r\n            var self = this;\r\n            if(!status){\r\n                throw new Error('status should not be empty');\r\n            }\r\n\r\n            if(['created'].indexOf(status) !== -1){\r\n                status = 'in_progress';\r\n            }\r\n\r\n            if(_allowedStatus.indexOf(status) === -1){\r\n                throw new Error('unknown status '+status);\r\n            }\r\n            if(!this.is(status)){\r\n                _.forEach(_.without(_allowedStatus, status), function(st){\r\n                    self.setState(st, false);\r\n                });\r\n                this.setState(status, true);\r\n            }\r\n            return this;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Builds a task listing element\r\n     *\r\n     * @param {Object} config - the component config\r\n     * @param {Array} data - the initial task data to be loaded from the server REST api call\r\n     * @returns {taskElement} the component\r\n     *\r\n     * @event remove - Emitted when the element requests to be removed\r\n     * @event download - Emitted when the element requests downloading its associated file\r\n     * @event report - Emitted when a list element requests its related report to be displayed\r\n     * @event update - Emitted when the display update is done\r\n     */\r\n    return function taskElementFactory(config, data) {\r\n        var initConfig = _.defaults(config || {}, _defaults);\r\n\r\n        /**\r\n         * The component\r\n         * @typedef {ui/component} taskElement\r\n         */\r\n        return component(taskElementApi)\r\n            .setTemplate(elementTpl)\r\n            .on('init', function(){\r\n                this.data = data || {};\r\n            })\r\n            .on('render', function() {\r\n\r\n                var self = this;\r\n                var $component = this.getElement();\r\n\r\n                this.update(data);\r\n\r\n                $component.find('[data-role=\"download\"]').click(function(){\r\n                    self.trigger('download');\r\n                });\r\n                $component.find('[data-role=\"remove\"]').click(function(){\r\n                    self.trigger('remove');\r\n                });\r\n                $component.find('[data-role=\"report\"]').click(function(){\r\n                    self.trigger('report');\r\n                });\r\n\r\n            })\r\n            .init(initConfig);\r\n    };\r\n\r\n});\n","\ndefine('tpl!taoTaskQueue/component/listing/tpl/report', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"task-detail-element\\\">\\r\\n    <div class=\\\"detail-description\\\">\\r\\n        <span class=\\\"label\\\"></span>\\r\\n        <span class=\\\"time\\\"></span>\\r\\n    </div>\\r\\n    <div class=\\\"action-group action-top\\\">\\r\\n        <span data-role=\\\"close\\\" class=\\\"icon-compress\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"close report\", options) : helperMissing.call(depth0, \"__\", \"close report\", options)))\n    + \"\\\"/>\\r\\n    </div>\\r\\n    <div class=\\\"detail-body\\\">\\r\\n    </div>\\r\\n    <div class=\\\"no-detail\\\">\\r\\n        <span class=\\\"message\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"No report available\", options) : helperMissing.call(depth0, \"__\", \"No report available\", options)))\n    + \"</span>\\r\\n    </div>\\r\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoTaskQueue/component/listing/css/report',[],function(){});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\ndefine('taoTaskQueue/component/listing/report',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'moment',\r\n    'ui/component',\r\n    'ui/hider',\r\n    'ui/report',\r\n    'tpl!taoTaskQueue/component/listing/tpl/report',\r\n    'css!taoTaskQueue/component/listing/css/report'\r\n], function ($, _, __, moment, component, hider, reportFactory, elementTpl) {\r\n    'use strict';\r\n\r\n    var _defaults = {\r\n    };\r\n\r\n    var reportElementApi = {\r\n        /**\r\n         * Update the task report with the data\r\n         * @param {Object} data - the standard task log data\r\n         * @param {String} data.taskLabel - the task name to be displayed to user\r\n         * @param {Object} data.report - the standard report object\r\n         */\r\n        update : function update(data){\r\n\r\n            var $component = this.getElement();\r\n            $component.find('.label').html(data.taskLabel);\r\n\r\n            //set report here\r\n            if(data.report && _.isArray(data.report.children) && data.report.children.length){\r\n                this.setState('noreport', false);\r\n                reportFactory({replace:true}, data.report.children[0]).render($component.find('.detail-body'));\r\n            }else{\r\n                this.setState('noreport', true);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Builds a task listing element\r\n     *\r\n     * @param {Object} config - the component config\r\n     * @param {Array} data - the initial task data to be loaded from the server REST api call\r\n     * @returns {taskReport} the component\r\n     *\r\n     * @event close - Emitted when the report needs to be closed\r\n     */\r\n    return function taskReportFactory(config, data) {\r\n        var initConfig = _.defaults(config || {}, _defaults);\r\n\r\n        /**\r\n         * The component\r\n         * @typedef {ui/component} taskReport\r\n         */\r\n        return component(reportElementApi)\r\n            .setTemplate(elementTpl)\r\n            .on('render', function() {\r\n\r\n                var self = this;\r\n                var $component = this.getElement();\r\n\r\n                this.update(data);\r\n\r\n                $component.find('[data-role=\"close\"]').click(function(){\r\n                    self.trigger('close');\r\n                });\r\n\r\n            })\r\n            .init(initConfig);\r\n    };\r\n\r\n});\n","\ndefine('tpl!taoTaskQueue/component/listing/tpl/list', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"task-listing\\\">\\r\\n    <div class=\\\"box\\\">\\r\\n        <div class=\\\"arrow\\\"></div>\\r\\n        <div class=\\\"description\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\r\\n        <div class=\\\"empty-placeholder\\\">\";\n  if (helper = helpers.emptyText) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.emptyText); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\r\\n        <ul class=\\\"task-list plain\\\"></ul>\\r\\n        <div class=\\\"clear-box\\\">\\r\\n            <a class=\\\"clear-all\\\" href=\\\"#\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Clear all finished tasks\", options) : helperMissing.call(depth0, \"__\", \"Clear all finished tasks\", options)))\n    + \"\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Clear all finished\", options) : helperMissing.call(depth0, \"__\", \"Clear all finished\", options)))\n    + \"</a>\\r\\n        </div>\\r\\n        <div class=\\\"view-detail\\\"></div>\\r\\n    </div>\\r\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoTaskQueue/component/listing/tpl/elementWrapper', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<li data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></li>\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoTaskQueue/component/listing/css/list',[],function(){});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\ndefine('taoTaskQueue/component/listing/list',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/component',\r\n    'taoTaskQueue/component/listing/element',\r\n    'tpl!taoTaskQueue/component/listing/tpl/list',\r\n    'tpl!taoTaskQueue/component/listing/tpl/elementWrapper',\r\n    'css!taoTaskQueue/component/listing/css/list'\r\n], function ($, _, __, component, listElementFactory, listTpl, elementWrapperTpl) {\r\n    'use strict';\r\n\r\n    var _defaults = {\r\n        title : 'Task List',\r\n        emptyText : __('The list is currently empty.')\r\n    };\r\n\r\n    var listApi = {\r\n        /**\r\n         * Remove a list element\r\n         * @param {taoTaskQueue/component/listing/element} listElement\r\n         * @returns {taskList}\r\n         */\r\n        removeElement : function removeElement(listElement){\r\n            listElement.destroy();\r\n            this.getElement().find('ul li[data-id=\"'+listElement.getId()+'\"]').remove();\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Insert a list element\r\n         * @param {taoTaskQueue/component/listing/element} listElement\r\n         * @returns {taskList}\r\n         */\r\n        insertElement : function insertElement(listElement){\r\n            var id = listElement.getId();\r\n            var $li = $(elementWrapperTpl({\r\n                id : id\r\n            }));\r\n            this.getElement().find('ul').prepend($li);\r\n            listElement.render($li);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Show the detail\r\n         * @param {taoTaskQueue/component/listing/report} detailElement - the detail element to be shown\r\n         * @param {Booleam} [show] - should the detail of an element be immediately shown or not\r\n         * @returns {taskList}\r\n         */\r\n        setDetail : function setDetail(detailElement, show){\r\n            detailElement.render(this.getElement().find('.view-detail'));\r\n            if(show){\r\n                this.setState('detail-view', true);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hide the detail panel and display the default list view again\r\n         * @returns {taskList}\r\n         */\r\n        hideDetail : function hideDetail(){\r\n            this.setState('detail-view', false);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Scroll to the top of the list\r\n         * @returns {taskList}\r\n         */\r\n        scrollToTop : function scrollToTop(){\r\n            this.getElement().find('.task-list').get(0).scrollTo(0, 0);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Animate the insertion tset emphasis on it\r\n         * @param listElement\r\n         * @returns {taskList}\r\n         */\r\n        animateInsertion : function animateInsertion(listElement){\r\n            var $listElement = listElement.getElement();\r\n            var $container = $listElement.parent();\r\n            $container.addClass('inserting');\r\n            $listElement.addClass('new-element');\r\n            _.delay(function(){\r\n                $container.removeClass('inserting');\r\n                _.delay(function(){\r\n                    $listElement.removeClass('new-element');\r\n                }, 400);\r\n            },100);\r\n            return this;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Builds a simple task list component\r\n     *\r\n     * @param {Object} config - the component config\r\n     * @returns {taskList} the component\r\n     */\r\n    return function taskListFactory(config) {\r\n        var initConfig = _.defaults(config || {}, _defaults);\r\n\r\n        /**\r\n         * The component\r\n         * @typedef {ui/component} taskList\r\n         */\r\n        return component(listApi)\r\n            .setTemplate(listTpl)\r\n            .on('render', function(){\r\n                var self = this;\r\n                this.getElement().find('.clear-all').on('click', function(e){\r\n                    e.preventDefault();\r\n                    self.trigger('clearall');\r\n                });\r\n            })\r\n            .init(initConfig);\r\n    };\r\n\r\n});\n","\ndefine('tpl!taoTaskQueue/component/manager/tpl/manager', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"task-manager-container\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Background tasks\", options) : helperMissing.call(depth0, \"__\", \"Background tasks\", options)))\n    + \"\\\">\\r\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoTaskQueue/component/manager/css/manager',[],function(){});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\ndefine('taoTaskQueue/component/manager/manager',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'ui/component',\r\n    'ui/badge/badge',\r\n    'ui/component/alignable',\r\n    'ui/animable/absorbable/absorbable',\r\n    'ui/animable/pulsable/pulsable',\r\n    'taoTaskQueue/component/listing/element',\r\n    'taoTaskQueue/component/listing/report',\r\n    'taoTaskQueue/component/listing/list',\r\n    'tpl!taoTaskQueue/component/manager/tpl/manager',\r\n    'css!taoTaskQueue/component/manager/css/manager'\r\n], function ($, _, __, hider, component, badgeFactory, makeAlignable, makeAbsorbable, makePulsable, listElementFactory, reportElementFactory, taskListFactory, managerTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Transform the task log summary into a configuration set for the badge\r\n     * @param {Object} tasksStatuses - the task log summary\r\n     * @returns {Object} the new badge data to be displayed following the format {type, loading, value}\r\n     */\r\n    var getBadgeDataFromStatus = function getBadgeDataFromStatus(tasksStatuses){\r\n        var total =  0;\r\n        var data = {loading : false};\r\n        if(tasksStatuses){\r\n            if(tasksStatuses.numberOfTasksInProgress){\r\n                total += parseInt(tasksStatuses.numberOfTasksInProgress, 10);\r\n                data.type = 'info';\r\n                data.loading = (tasksStatuses.numberOfTasksInProgress > 0);\r\n            }\r\n            if(tasksStatuses.numberOfTasksCompleted){\r\n                total += parseInt(tasksStatuses.numberOfTasksCompleted, 10);\r\n                data.type = 'success';\r\n            }\r\n            if(tasksStatuses.numberOfTasksFailed){\r\n                total += parseInt(tasksStatuses.numberOfTasksFailed, 10);\r\n                if(data.type === 'success'){\r\n                    data.type = 'warning';//if there are both success and failures, the status should be a warning\r\n                }else{\r\n                    data.type = 'error';\r\n                }\r\n            }\r\n            data.value = total;\r\n            return data;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Transform the internal list of elements into a configuration set for the badge\r\n     * @param {Object} elements - internal collection of task elements\r\n     * @returns {Object} the new badge data to be displayed following the format {type, loading, value}\r\n     */\r\n    var getBadgeDataFromElements = function getBadgeDataFromElements(elements){\r\n\r\n        var statusMap = {\r\n            in_progress: 'numberOfTasksInProgress',\r\n            created: 'numberOfTasksInProgress',\r\n            failed: 'numberOfTasksFailed',\r\n            completed: 'numberOfTasksCompleted',\r\n        };\r\n\r\n        var stats = {\r\n            numberOfTasksFailed : 0,\r\n            numberOfTasksCompleted : 0,\r\n            numberOfTasksInProgress : 0\r\n        };\r\n\r\n        _.forEach(elements, function(element){\r\n            var status = element.getStatus();\r\n            if(statusMap[status]){\r\n                //it is a know state, so add to the stats array\r\n                stats[statusMap[status]]++;\r\n            }\r\n        });\r\n\r\n        return getBadgeDataFromStatus(stats);\r\n    };\r\n\r\n    /**\r\n     * The collection of config used for component alignments\r\n     * the values have been adjusted to make it work well with the list's css\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _alignementConfig = {\r\n        initial : {\r\n            hPos: 'center',\r\n            hOrigin: 'center',\r\n            vPos: 'bottom',\r\n            vOrigin: 'top',\r\n            hOffset: -156\r\n        },\r\n        showDetail : {\r\n            hPos: 'center',\r\n            hOrigin: 'center',\r\n            vPos: 'bottom',\r\n            vOrigin: 'top',\r\n            hOffset: -156-121\r\n        }\r\n    };\r\n\r\n    var taskQueue = {\r\n\r\n        /**\r\n         * Get the list of task elements\r\n         * @returns {taskQueueManager} - self for chaining\r\n         */\r\n        getTaskElements : function getTaskElements(){\r\n            return this.taskElements;\r\n        },\r\n\r\n        /**\r\n         * Show the details associated to a task\r\n         * @param {Object} tasksData - a single task data to view the report form\r\n         * @returns {taskQueueManager} - self for chaining\r\n         */\r\n        showDetail : function showDetail(taskData){\r\n            var $component = this.getElement();\r\n            var list = this.list;\r\n            var reportElement = reportElementFactory({replace:true}, taskData)\r\n                .on('close', function(){\r\n                    list.hideDetail();\r\n                    list.alignWith($component, _alignementConfig.initial);\r\n                    this.destroy();\r\n                });\r\n            list.setDetail(reportElement, true);\r\n            list.alignWith($component, _alignementConfig.showDetail);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add a new task\r\n         * @param {Object} tasksData - a single task data to be added to the list\r\n         * @param {Boolean} [animate=false] - tells if the new task addition should be made through a smooth transition effect\r\n         * @returns {taskQueueManager} - self for chaining\r\n         */\r\n        addNewTask : function addNewTask(taskData, animate){\r\n            var self = this;\r\n            var taskId = taskData.id;\r\n            var listElement = listElementFactory({}, taskData)\r\n                .on('remove', function(){\r\n                    delete self.taskElements[taskId];\r\n                    self.list.removeElement(listElement);\r\n                    self.trigger('remove', taskId);\r\n                    self.trigger('listchange');\r\n                })\r\n                .on('report', function(){\r\n                    self.trigger('report', taskId);\r\n                })\r\n                .on('download', function(){\r\n                    self.trigger('download', taskId);\r\n                });\r\n\r\n\r\n            if(animate){\r\n                if(this.list.is('hidden')){\r\n                    this.list.show();\r\n                }\r\n                this.list.scrollToTop();\r\n            }\r\n\r\n            this.list.insertElement(listElement);\r\n            this.taskElements[taskId] = listElement;\r\n            this.trigger('listchange');\r\n\r\n            if(animate){\r\n                this.list.animateInsertion(listElement);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update the badge display according to the current status of the tasks in the list\r\n         * @returns {taskQueueManager} - self for chaining\r\n         */\r\n        selfUpdateBadge : function selfUpdateBadge(){\r\n            var badgeData = getBadgeDataFromElements(this.getTaskElements());\r\n            if(!this.badge){\r\n                this.badge = makePulsable(badgeFactory(badgeData)).render(this.getElement());\r\n            }else{\r\n                this.badge.update(badgeData);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Load the the array of task element data requested form the server REST API\r\n         * @param {Array} tasksData - the task data to be loaded from the server REST API call\r\n         * @returns {taskQueueManager} - self for chaining\r\n         */\r\n        loadData : function loadData(tasksData){\r\n            var self = this;\r\n            var found = [];\r\n            _.forEach(tasksData, function(entry){\r\n                var id = entry.id;\r\n                if(self.taskElements[id]){\r\n                    //update\r\n                    self.taskElements[id].update(entry);\r\n                    if(self.taskElements[id].getStatus() !== entry.status){\r\n                        //highlight status change only\r\n                        self.taskElements[id].highlight();\r\n                    }\r\n                }else{\r\n                    //create\r\n                    self.addNewTask(entry);\r\n                }\r\n                found.push(id);\r\n            });\r\n\r\n            //remove any element from the list that are not found in the new data collection (task has been archived server side)\r\n            _.forEach(_.difference(_.keys(self.taskElements), found), function(id){\r\n                self.list.removeElement(self.taskElements[id]);\r\n                delete self.taskElements[id];\r\n            });\r\n\r\n            this.trigger('listchange');\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Trigger the pulse animation on the status badge\r\n         * @returns {taskQueueManager} - self for chaining\r\n         */\r\n        pulse : function pulse(){\r\n            if(this.badge){\r\n                this.badge.pulse(3);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Remove all finished element (completed or failed) from the list\r\n         * @returns {taskQueueManager}\r\n         */\r\n        removeAllFinished : function removeAllFinished(){\r\n\r\n            var self = this;\r\n\r\n            _(this.taskElements).filter(function(element){\r\n                return (element.getStatus() === 'completed' || element.getStatus() === 'failed');\r\n            }).forEach(function(element){\r\n                delete self.taskElements[element.getId()];\r\n                self.list.removeElement(element);\r\n                self.trigger('listchange');\r\n            });\r\n\r\n            this.trigger('listclearfinished');\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggle the visibility of the clear all button according to the element status\r\n         * @returns {taskQueueManager}\r\n         */\r\n        selfUpdateClearButton : function selfUpdateClearButton(){\r\n            var $clearAllBox = this.getElement().find('.clear-box');\r\n            var finishedCount = _(this.taskElements).map(function(element){\r\n                return element.getStatus();\r\n            }).filter(function(status){\r\n                return (status === 'completed' || status === 'failed');\r\n            }).size();\r\n            if(finishedCount > 0){\r\n                //show button\r\n                hider.show($clearAllBox);\r\n            }else{\r\n                hider.hide($clearAllBox);\r\n            }\r\n            return this;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Builds the task queue manager\r\n     * @param {Object} config - the component config\r\n     * @param {Array} data - the initial task data to be loaded from the server REST api call\r\n     * @returns {taskQueueManager} the component\r\n     *\r\n     * @event remove - Emitted when a list element is removed\r\n     * @event download - Emitted when a list element requests the file download associated to a completed task\r\n     * @event report - Emitted when a list element requests a task report to be displayed\r\n     * @event listchange - Emitted when the list element list has been updated\r\n     * @event listshow - Emitted when the list is displayed\r\n     * @event listhide - Emitted when the list is hidden\r\n     * @event listclearfinished - Emitted when all the finished element from the list is removed\r\n     */\r\n    return function taskQueueManagerFactory(config, data) {\r\n\r\n        data = data || {};\r\n\r\n        /**\r\n         * The component\r\n         * @typedef {ui/component} taskQueueManager\r\n         */\r\n        return makeAbsorbable(component(taskQueue))\r\n            .setTemplate(managerTpl)\r\n            .on('destroy listhide', function(){\r\n                $(document).off('click.task-queue-manager');\r\n            })\r\n            .on('init', function() {\r\n                //initialize the task element collection\r\n                this.taskElements = {};\r\n\r\n                //create the list\r\n                this.list = makeAlignable(taskListFactory())\r\n                    .init({\r\n                        title : __('Background tasks'),\r\n                        emptyText : __('There is currently no background task'),\r\n                    });\r\n            })\r\n            .on('listshow', function(){\r\n                var self = this;\r\n                var $component = this.getElement();\r\n                //close the popup when clicking outside of the component\r\n                $(document).off('click.task-queue-manager').on('click.task-queue-manager', function(e){\r\n                    if($component.get(0) !== e.target && !$.contains($component.get(0), e.target)){\r\n                        if(!self.list.is('hidden')){\r\n                            self.list.hide();\r\n                            self.trigger('listhide');\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .on('listchange', function(){\r\n                this.selfUpdateBadge();\r\n                this.selfUpdateClearButton();\r\n            })\r\n            .on('render', function() {\r\n\r\n                var self = this;\r\n                var $trigger = this.getElement();\r\n\r\n                //position the list\r\n                this.list.render($trigger)\r\n                    .moveBy(0, 0)\r\n                    .alignWith($trigger, _alignementConfig.initial)\r\n                    .hide();//start hidden\r\n\r\n                //load initial data\r\n                this.loadData(data);\r\n\r\n                //prevent closing the panel when clicking on it\r\n                this.list.getElement()\r\n                    .addClass('overflown-element')\r\n                    .on('click', function(e){\r\n                    e.stopPropagation();\r\n                });\r\n\r\n                this.list.on('clearall', function(){\r\n                    self.removeAllFinished();\r\n                });\r\n\r\n                //toggle list visibility\r\n                $trigger.on('click', function(){\r\n                    if(self.list.is('hidden')){\r\n                        self.list.show();\r\n                        self.trigger('listshow');\r\n                    }else{\r\n                        self.list.hide();\r\n                        self.trigger('listhide');\r\n                    }\r\n                });\r\n\r\n            })\r\n            .init(config || {});\r\n    };\r\n\r\n});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * @example\r\n * taskQueueModelFactory({\r\n *        url : {\r\n *            get: urlHelper.route('get', 'TaskQueueWebApi', 'taoTaskQueue'),\r\n *            archive: urlHelper.route('archive', 'TaskQueueWebApi', 'taoTaskQueue'),\r\n *            all : urlHelper.route('getAll', 'TaskQueueWebApi', 'taoTaskQueue'),\r\n *            download : urlHelper.route('download', 'TaskQueueWebApi', 'taoTaskQueue')\r\n *        },\r\n *        pollSingleIntervals : [\r\n *            {iteration: 4, interval:1000},\r\n *        ],\r\n *        pollAllIntervals : [\r\n *            {iteration: 0, interval:5000},\r\n *        ]\r\n *    }).pollAll()\r\n */\r\ndefine('taoTaskQueue/model/taskQueueModel',[\r\n    'jquery',\r\n    'lodash',\r\n    'core/promise',\r\n    'core/eventifier',\r\n    'core/polling',\r\n    'core/dataProvider/request',\r\n    'jquery.fileDownload'\r\n], function ($, _, Promise, eventifier, polling, request) {\r\n    'use strict';\r\n\r\n    var _defaults = {\r\n        url : {\r\n            get: '',\r\n            archive: '',\r\n            all : '',\r\n            download : ''\r\n        },\r\n        pollSingleIntervals : [\r\n            {iteration: 4, interval:1000},\r\n        ],\r\n        pollAllIntervals : [\r\n            {iteration: 10, interval:5000},\r\n            {iteration: 0, interval:10000}//infinite\r\n        ]\r\n    };\r\n\r\n    /**\r\n     * Check if two tasks have equivalent task status\r\n     * @param {Object} task1 - a task object to be compared\r\n     * @param {Object} task2 - another task object to be compared\r\n     * @returns {Boolean}\r\n     */\r\n    function hasSameState(task1, task2){\r\n        if(task1.status === task2.status){\r\n            return true;\r\n        }else if(task1.status === 'created' || task1.status === 'in_progress'){\r\n            return  (task2.status === 'created' || task2.status === 'in_progress');\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Create a task queue model to communicates with the server REST API\r\n     *\r\n     * @param {Object} config\r\n     * @param {Object} config.url - the list of server endpoints\r\n     * @param {String} config.url.get - the url to get the status log for a single task\r\n     * @param {String} config.url.archive - the url to archive a task\r\n     * @param {String} config.url.all - the url to get the status for all tasks for the current user\r\n     * @param {String} config.url.download - the url to download a file created by the task\r\n     * @param {Array} config.pollSingleIntervals - the array of poll intervals that will be used to regulate the polling speed for a simple task\r\n     *         e.g. {iteration: 4, interval:1000} means that it will poll up to four times every 1000ms.\r\n     * @param {Array} config.pollAllIntervals - the array of poll intervals that will be used to regulate the main polling speed.\r\n     *         e.g. {iteration: 10, interval:1000} means that it will poll up to 10 times every 5000ms.\r\n     *         e.g. {iteration: 0, interval:10000} means that it will poll up to 10000ms indefinitely\r\n     *\r\n     * @return {taskQueueModel}\r\n     */\r\n    return function taskQueueModel(config) {\r\n\r\n        var model;\r\n\r\n        /**\r\n         * cached array of task data\r\n         * @type {Object}\r\n         */\r\n        var _cache;\r\n\r\n        /**\r\n         * store instance of single polling\r\n         * @type {Object}\r\n         */\r\n        var singlePollings = {};\r\n\r\n        var getPollSingleIntervals = function getPollSingleIntervals(){\r\n            if(config.pollSingleIntervals && _.isArray(config.pollSingleIntervals)){\r\n                return _.cloneDeep(config.pollSingleIntervals);\r\n            }\r\n        };\r\n\r\n        var getPollAllIntervals = function getPollAllIntervals(){\r\n            if(config.pollAllIntervals && _.isArray(config.pollAllIntervals)){\r\n                return _.cloneDeep(config.pollAllIntervals);\r\n            }\r\n        };\r\n\r\n        config = _.defaults(config || {}, _defaults);\r\n\r\n        /**\r\n         * @typedef taskQueueModel - central model to query the backend's REST API for task queue\r\n         */\r\n        model = eventifier({\r\n\r\n            /**\r\n             * Modify the task queue REST API endpoints\r\n             * @param urls - the new endpoints\r\n             * @returns {taskQueueModel}\r\n             */\r\n            setEndpoints : function setEndpoints(urls){\r\n                _.assign(config.url, urls || {});\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Get the status of a task identified by its unique task id\r\n             *\r\n             * @param {String} taskId - unique task identifier\r\n             * @returns {Promise}\r\n             */\r\n            get : function get(taskId){\r\n                var status;\r\n\r\n                if(!config.url || !config.url.get){\r\n                    throw new TypeError('config.url.get is not configured while get() is being called');\r\n                }\r\n\r\n                status = request(config.url.get, {taskId: taskId}, 'GET', {}, true)\r\n                    .then(function(taskData){\r\n                        //check taskData\r\n                        if(taskData && taskData.status){\r\n                            if(_cache){\r\n                                //detect change\r\n                                if(!_cache[taskData.id]){\r\n                                    model.trigger('singletaskadded', taskData);\r\n                                }else if(!hasSameState(_cache[taskData.id], taskData)){\r\n                                    //check if the status has changed\r\n                                    model.trigger('singletaskstatuschange', taskData);\r\n                                }\r\n                            }else{\r\n                                _cache = {};\r\n                            }\r\n                            _cache[taskData.id] = taskData;\r\n                            return taskData;\r\n                        }\r\n                        return Promise.reject(new Error('failed to get task data'));\r\n                    });\r\n\r\n                status.catch(function(err){\r\n                    model.trigger('error', err);\r\n                });\r\n\r\n                return status;\r\n            },\r\n\r\n            /**\r\n             * Get the status of all task identified by their unique task id\r\n             *\r\n             * @returns {Promise} - resolved when the server response has been received\r\n             */\r\n            getAll : function getAll(){\r\n                var status;\r\n\r\n                if(!config.url || !config.url.all){\r\n                    throw new TypeError('config.url.all is not configured while getAll() is being called');\r\n                }\r\n\r\n                status = request(config.url.all, {limit: 100}, 'GET', {}, true)\r\n                    .then(function(taskData){\r\n                        var newCache = {};\r\n                        //check taskData\r\n                        if(taskData){\r\n                            if(_cache){\r\n                                //detect change\r\n                                _.forEach(taskData, function(task){\r\n                                    var id = task.id;\r\n                                    if(!_cache[id]){\r\n                                        model.trigger('multitaskadded', task);\r\n                                    }else if(!hasSameState(_cache[id], task)){\r\n                                        //check if the status has changed\r\n                                        model.trigger('multitaskstatuschange', task);\r\n                                    }\r\n                                    newCache[id] = task;\r\n                                });\r\n                                _.forEach(_.difference(_.keys(_cache), _.keys(newCache)), function(id){\r\n                                    model.trigger('taskremoved', _cache[id]);\r\n                                });\r\n                            }else{\r\n                                _.forEach(taskData, function(task){\r\n                                    newCache[task.id] = task;\r\n                                });\r\n                            }\r\n                            //update local cache\r\n                            _cache = newCache;\r\n\r\n                            return taskData;\r\n                        }\r\n                        return Promise.reject(new Error('failed to get all task data'));\r\n                    });\r\n\r\n                status.catch(function(err){\r\n                    model.trigger('error', err);\r\n                });\r\n\r\n                return status;\r\n            },\r\n\r\n            /**\r\n             * Remove a task identified by its unique task id\r\n             *\r\n             * @param {String} taskId - the task id\r\n             * @returns {Promise} - resolved when achive action done\r\n             */\r\n            archive : function archive(taskId){\r\n\r\n                var status;\r\n\r\n                if(!config.url || !config.url.archive){\r\n                    throw new TypeError('config.url.archive is not configured while archive() is being called');\r\n                }\r\n\r\n                status = request(config.url.archive, {taskId : taskId}, 'GET', {}, true);\r\n\r\n                status.catch(function(res){\r\n                    model.trigger('error', res);\r\n                });\r\n\r\n                return status;\r\n            },\r\n\r\n            /**\r\n             * Poll status for all tasks\r\n             * @param {Boolean} [immediate] - tells if the polling should immediately start (otherwise, will wait until the next iteration)\r\n             * @returns {taskQueueModel}\r\n             */\r\n            pollAll : function pollAll(immediate){\r\n\r\n                var self = this;\r\n                var loop = 0;\r\n                var pollingIntervals = getPollAllIntervals();\r\n\r\n                /**\r\n                 * gradually increase the polling interval to ease server load\r\n                 * @private\r\n                 * @param {Object} pollingInstance - a poll object\r\n                 */\r\n                var _updateInterval = function _updateInterval(pollingInstance){\r\n                    var pollingInterval;\r\n                    if(loop){\r\n                        loop --;\r\n                    }else{\r\n                        pollingInterval = pollingIntervals.shift();\r\n                        if(pollingInterval && typeof pollingInterval.iteration !== 'undefined' && pollingInterval.interval){\r\n                            loop = pollingInterval.iteration;\r\n                            pollingInstance.setInterval(pollingInterval.interval);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                if(!config.url || !config.url.all){\r\n                    throw new TypeError('config.url.all is not configured while pollAll() is being called');\r\n                }\r\n\r\n                if(!this.globalPolling){\r\n                    //no global polling yet, create one\r\n                    this.globalPolling = polling({\r\n                        action: function action() {\r\n                            // get into asynchronous mode\r\n                            var done = this.async();\r\n                            var statusArr;\r\n                            model.getAll().then(function(taskDataArray){\r\n                                model.trigger('pollAll', taskDataArray);\r\n\r\n                                //smart polling: stop polling when there is no task in progress\r\n                                statusArr = _.map(taskDataArray, 'status');\r\n                                if(statusArr.indexOf('in_progress') === -1 && statusArr.indexOf('created') === -1){\r\n                                    return done.reject();\r\n                                }\r\n\r\n                                _updateInterval(self.globalPolling);\r\n                                done.resolve();\r\n                            }).catch(function(){\r\n                                done.reject();\r\n                            });\r\n                        }\r\n                    });\r\n                    _updateInterval(this.globalPolling);\r\n                    this.globalPolling.start();\r\n                    this.trigger('pollAllStart');\r\n                }else{\r\n                    this.globalPolling.start();\r\n                    this.trigger('pollAllStart');\r\n                }\r\n\r\n                if(immediate){\r\n                    //if it is request to immediate start polling, start it now\r\n                    this.globalPolling.next();\r\n                }\r\n\r\n                return model;\r\n            },\r\n\r\n            /**\r\n             * Stop the main polling action\r\n             * @returns {taskQueueModel}\r\n             */\r\n            pollAllStop : function pollAllStop(){\r\n                if(this.globalPolling){\r\n                    this.globalPolling.stop();\r\n                    this.trigger('pollAllStop');\r\n                }\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Start a single fast polling for a single task id\r\n             * @param {String} taskId - the task id\r\n             * @returns {Promise} resolved when the single polling action finishes\r\n             */\r\n            pollSingle : function pollSingle(taskId){\r\n\r\n                var self = this;\r\n                var loop = 0;\r\n\r\n                var pollingIntervals = getPollSingleIntervals();\r\n\r\n                /**\r\n                 * gradually increase the polling interval to ease server load\r\n                 * @private\r\n                 * @param {Object} pollingInstance - a poll object\r\n                 */\r\n                var _updateInterval = function _updateInterval(pollingInstance){\r\n                    var pollingInterval;\r\n                    if(loop){\r\n                        loop --;\r\n                        return true;//continue polling\r\n                    }else{\r\n                        pollingInterval = pollingIntervals.shift();\r\n                        if(pollingInterval && pollingInterval.iteration && pollingInterval.interval){\r\n                            loop = pollingInterval.iteration;\r\n                            pollingInstance.setInterval(pollingInterval.interval);\r\n                            return true;//continue polling\r\n                        }else{\r\n                            //stop polling\r\n                            return false;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                if(!config.url || !config.url.get){\r\n                    throw new TypeError('config.url.get is not configured while pollSingle() is being called');\r\n                }\r\n\r\n                if(singlePollings[taskId]){\r\n                    singlePollings[taskId].stop();\r\n                }\r\n\r\n                return new Promise(function(resolve){\r\n                    var poll = polling({\r\n                        action: function action() {\r\n                            // get into asynchronous mode\r\n                            var done = this.async();\r\n                            self.get(taskId).then(function(taskData){\r\n                                if(taskData.status === 'completed' || taskData.status === 'failed'){\r\n                                    //the status status could be either \"completed\" or \"failed\"\r\n                                    poll.stop();\r\n                                    self.trigger('pollSingleFinished', taskId, taskData);\r\n                                    resolve({finished: true, task: taskData});\r\n                                }else if(!_updateInterval(poll)){\r\n                                    //if we have reached the end of the total polling config\r\n                                    self.trigger('pollSingleFinished', taskId, taskData);\r\n                                    resolve({finished: false, task: taskData});\r\n                                }else{\r\n                                    self.trigger('pollSingle', taskId, taskData);\r\n                                    done.resolve();//go to next poll iteration\r\n                                }\r\n\r\n                            }).catch(function(){\r\n                                done.reject();\r\n                            });\r\n                        }\r\n                    });\r\n                    _updateInterval(poll);\r\n                    singlePollings[taskId] = poll.start();\r\n                    self.trigger('pollSingleStart', taskId);\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Interrupt a single polling action\r\n             * @param {String} taskId - the task id\r\n             * @returns {model}\r\n             */\r\n            pollSingleStop : function pollSingleStop(taskId){\r\n                if(singlePollings && singlePollings[taskId]){\r\n                    singlePollings[taskId].stop();\r\n                    this.trigger('pollSingleStop', taskId);\r\n                }\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Call a task creation url\r\n             * @param {String} url - the server side task queue creation service\r\n             * @param {Object} [data] - request data\r\n             * @returns {promise} - resolved when task creation response is sent back by the server\r\n             */\r\n            create : function create(url, data){\r\n                var taskCreate, self = this;\r\n                taskCreate = request(url, data, 'POST', {}, true)\r\n                    .then(function(creationResult){\r\n                        //poll short result:\r\n                        if(creationResult && creationResult.task && creationResult.task.id){\r\n                            self.trigger('created', creationResult);\r\n                            return self.pollSingle(creationResult.task.id).then(function(result){\r\n                                if(creationResult.extra){\r\n                                    result.extra = creationResult.extra;\r\n                                }\r\n                                if(result.finished){\r\n                                    //send to queue\r\n                                    self.trigger('fastFinished', result);\r\n                                }else{\r\n                                    //send to queue\r\n                                    self.trigger('enqueued', result);\r\n                                }\r\n                                return result;\r\n                            });\r\n                        }\r\n                        return Promise.reject(new Error('failed to get task data'));\r\n                    });\r\n\r\n                taskCreate.catch(function(err){\r\n                    model.trigger('error', err);\r\n                });\r\n\r\n                return taskCreate;\r\n            },\r\n\r\n            /**\r\n             * Call the task result file download endpoint\r\n             * @param {String} taskId - the task id\r\n             * @returns {promise} - resolved when the download popup is shown\r\n             */\r\n            download : function download(taskId){\r\n\r\n                if(!config.url || !config.url.download){\r\n                    throw new TypeError('config.url.download is not configured while download() is being called');\r\n                }\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    $.fileDownload(config.url.download, {\r\n                        httpMethod: 'POST',\r\n                        data: {taskId : taskId},\r\n                        successCallback : function(result){\r\n                            resolve(result);\r\n                        },\r\n                        failCallback: function (err) {\r\n                            reject(err);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        });\r\n\r\n        return model;\r\n    };\r\n});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\ndefine('taoTaskQueue/model/taskQueue',[\r\n    'util/url',\r\n    'taoTaskQueue/model/taskQueueModel'\r\n], function (urlHelper, taskQueueModelFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the singleton task queue preconfigured with the tao task queue REST API.\r\n     */\r\n    return taskQueueModelFactory({\r\n        url : {\r\n            get: urlHelper.route('get', 'TaskQueueWebApi', 'taoTaskQueue'),\r\n            archive: urlHelper.route('archive', 'TaskQueueWebApi', 'taoTaskQueue'),\r\n            all : urlHelper.route('getAll', 'TaskQueueWebApi', 'taoTaskQueue'),\r\n            download : urlHelper.route('download', 'TaskQueueWebApi', 'taoTaskQueue')\r\n        },\r\n        pollSingleIntervals : [\r\n            {iteration: 3, interval:1000}\r\n        ],\r\n        pollAllIntervals : [\r\n            {iteration: 1, interval:8000},\r\n            {iteration: 0, interval:5000}\r\n        ]\r\n    });\r\n});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * @author Sam <sam@taotesting.com>\r\n */\r\ndefine('taoTaskQueue/controller/main',[\r\n    'jquery',\r\n    'taoTaskQueue/component/manager/manager',\r\n    'taoTaskQueue/model/taskQueue'\r\n],\r\nfunction ($, taskQueueManagerFactory, taskQueue) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This controller initialize all the task queue component globally for tao backoffice use\r\n     * @exports taoTaskQueue/controller/main\r\n     */\r\n    return {\r\n        start: function () {\r\n\r\n            var taskManager = taskQueueManagerFactory({\r\n                    replace: true\r\n                })\r\n                .on('remove', function (taskId) {\r\n                    taskQueue.archive(taskId);\r\n                })\r\n                .on('report', function (taskId) {\r\n                    taskQueue.get(taskId).then(function (task) {\r\n                        //show report in popup\r\n                        taskManager.showDetail(task);\r\n                    });\r\n                })\r\n                .on('download', function (taskId) {\r\n                    taskQueue.download(taskId);\r\n                })\r\n                .on('listclearfinished', function (){\r\n                    taskQueue\r\n                        .pollAllStop()\r\n                        .archive('all')\r\n                        .then(function(){\r\n                            taskQueue.pollAll();\r\n                        });\r\n                })\r\n                .render($('#taskqueue').parent())\r\n                .hide();//start hidden to prevent blinking effect\r\n\r\n            //listen to events started by the task queue model\r\n            taskQueue.on('taskcreated', function(data){\r\n                if(taskManager.list.is('hidden')){\r\n                    taskManager.absorbBurst(data.sourceDom, [0, 300, 600]).then(function(){\r\n                        taskManager.addNewTask(data.task);\r\n                        taskQueue.pollAll();\r\n                    });\r\n                }else{\r\n                    taskManager.addNewTask(data.task, true);\r\n                    taskQueue.pollAll();\r\n                }\r\n            }).on('multitaskstatuschange', function(){\r\n                taskManager.pulse();\r\n            }).on('pollAll', function (tasks) {\r\n                if(taskManager.is('hidden')){\r\n                    taskManager.show();\r\n                }\r\n                taskManager.loadData(tasks);\r\n            }).pollAll(true);//start polling immediately on load\r\n        }\r\n    };\r\n});\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('div.task-element{position:relative;background:#f3f1ef;padding:10px 20px;width:100%;height:70px;-webkit-transition:background, 2s, ease-out, 0s;-moz-transition:background, 2s, ease-out, 0s;-ms-transition:background, 2s, ease-out, 0s;-o-transition:background, 2s, ease-out, 0s;transition:background, 2s, ease-out, 0s}div.task-element.highlight{background:white;-webkit-transition:background, 0s, ease-out, 0s;-moz-transition:background, 0s, ease-out, 0s;-ms-transition:background, 0s, ease-out, 0s;-o-transition:background, 0s, ease-out, 0s;transition:background, 0s, ease-out, 0s}div.task-element .container-icon{position:absolute}div.task-element .container-icon .shape{display:inline-block;border-radius:50%;width:40px;height:40px;top:2px;position:relative}div.task-element .container-icon .shape [class^=\\\"icon-\\\"],div.task-element .container-icon .shape [class*=\\\" icon-\\\"]{font-size:20px;font-size:2rem;position:relative;top:9px;left:12px;text-shadow:none}div.task-element .container-icon .shape .icon-export,div.task-element .container-icon .shape .icon-import,div.task-element .container-icon .shape .icon-connect{left:10px}div.task-element .container-icon .shape .icon-property-advanced,div.task-element .container-icon .shape .icon-result-ok,div.task-element .container-icon .shape .icon-result-nok{top:10px;left:10px}div.task-element.in_progress .container-icon .shape{background:#0e5d91}div.task-element.in_progress .container-icon .shape [class^=\\\"icon-\\\"],div.task-element.in_progress .container-icon .shape [class*=\\\" icon-\\\"]{color:#e7eff4}div.task-element.in_progress .action-group.action-bottom [data-role=\\\"notify\\\"]{display:none}div.task-element.in_progress .action-group.action-top [data-role=\\\"remove\\\"]{display:none}div.task-element.completed .container-icon .shape{background:#0e914b}div.task-element.completed .container-icon .shape [class^=\\\"icon-\\\"],div.task-element.completed .container-icon .shape [class*=\\\" icon-\\\"]{color:#e7f4ed}div.task-element.completed .action-group.action-bottom [data-role=\\\"download\\\"],div.task-element.completed .action-group.action-bottom [data-role=\\\"report\\\"]{display:inline-block}div.task-element.failed .container-icon .shape{background:#ba122b}div.task-element.failed .container-icon .shape [class^=\\\"icon-\\\"],div.task-element.failed .container-icon .shape [class*=\\\" icon-\\\"]{color:#f8e7ea}div.task-element.failed .action-group.action-bottom [data-role=\\\"download\\\"],div.task-element.failed .action-group.action-bottom [data-role=\\\"report\\\"]{display:inline-block}div.task-element .container-text{padding-top:0px;margin-left:60px;width:240px}div.task-element .container-text .label{min-height:22px;max-height:38px;overflow:hidden;color:#222}div.task-element .container-text .time{color:#92918f;font-size:12px;font-size:1.2rem}div.task-element .action-group{position:absolute}div.task-element .action-group [class^=\\\"icon-\\\"],div.task-element .action-group [class*=\\\" icon-\\\"]{font-size:16px;font-size:1.6rem;background-color:transparent;width:20px;height:20px;display:inline-block;padding-left:4px;margin-left:5px;cursor:pointer}div.task-element .action-group [class^=\\\"icon-\\\"]:hover,div.task-element .action-group [class*=\\\" icon-\\\"]:hover{opacity:0.6}div.task-element .action-group.action-top{top:6px;right:14px}div.task-element .action-group.action-bottom{bottom:6px;right:12px}div.task-element .action-group.action-bottom [class^=\\\"icon-\\\"],div.task-element .action-group.action-bottom [class*=\\\" icon-\\\"]{display:none}\\r\\n\\r\\n/*# sourceMappingURL=element.css.map */div.task-detail-element{position:relative;padding:10px 20px;width:600px;min-height:250px;background:#f3f1ef}div.task-detail-element .detail-description .label{margin-right:4px;color:#222;font-weight:bold}div.task-detail-element .detail-description .time{margin-left:4px;color:#92918f;font-size:12px;font-size:1.2rem}div.task-detail-element .detail-body{max-height:500px;overflow-y:auto;padding:10px 0}div.task-detail-element .action-top{position:absolute;top:9px;right:14px}div.task-detail-element .action-top [class^=\\\"icon-\\\"],div.task-detail-element .action-top [class*=\\\" icon-\\\"]{font-size:16px;font-size:1.6rem;color:#222;background-color:transparent;width:20px;height:20px;display:inline-block;padding-left:4px;margin-left:5px;cursor:pointer}div.task-detail-element .action-top [class^=\\\"icon-\\\"]:hover,div.task-detail-element .action-top [class*=\\\" icon-\\\"]:hover{opacity:0.6}div.task-detail-element .no-detail{display:none}div.task-detail-element.noreport .no-detail{display:block;color:#92918f}\\r\\n\\r\\n/*# sourceMappingURL=report.css.map */div.task-listing{position:relative;cursor:default;padding-top:0px}div.task-listing div.box{position:relative;min-height:76px;min-width:360px;background:#f3f1ef;-webkit-box-shadow:0 3px 6px 0px rgba(0,0,0,0.6);-moz-box-shadow:0 3px 6px 0px rgba(0,0,0,0.6);-ms-box-shadow:0 3px 6px 0px rgba(0,0,0,0.6);-o-box-shadow:0 3px 6px 0px rgba(0,0,0,0.6);box-shadow:0 3px 6px 0px rgba(0,0,0,0.6);border:1px solid #ddd;border-radius:2px;-webkit-border-radius:2px}div.task-listing div.box .description{padding:2px 20px;background:#dbd9d7;color:#222;font-weight:bold;border-bottom:solid 1px #ddd;min-height:8px}div.task-listing div.box .arrow{-webkit-transform:rotate(45deg);-moz-transform:rotate(45deg);-ms-transform:rotate(45deg);-o-transform:rotate(45deg);transform:rotate(45deg);border:1px #ddd solid;border-right:none;border-bottom:none;width:16px;height:16px;background:#dbd9d7;color:#222;position:absolute;right:14px;top:-9px}div.task-listing div.box ul.task-list{position:relative;top:0;left:0;right:0;opacity:1;padding:0 !important;border:none;max-height:460px;overflow:auto;background:#c2c1bf;position:relative}div.task-listing div.box ul.task-list li{position:relative;width:100%;max-height:100px;color:#222;background:#c2c1bf}div.task-listing div.box ul.task-list li:not(:last-child){border-bottom:solid 1px #dbd9d7}div.task-listing div.box ul.task-list li.inserting{max-height:0;-webkit-transition:max-height, .5s, ease-out, 0s;-moz-transition:max-height, .5s, ease-out, 0s;-ms-transition:max-height, .5s, ease-out, 0s;-o-transition:max-height, .5s, ease-out, 0s;transition:max-height, .5s, ease-out, 0s}div.task-listing div.box ul.task-list li.inserting .task-element{height:0px}div.task-listing div.box ul.task-list li.inserted{min-height:70px}div.task-listing div.box ul.task-list li .task-element{transform:scaleY(1);-webkit-transition:scaleY, .6s, ease-out, 0s;-moz-transition:scaleY, .6s, ease-out, 0s;-ms-transition:scaleY, .6s, ease-out, 0s;-o-transition:scaleY, .6s, ease-out, 0s;transition:scaleY, .6s, ease-out, 0s}div.task-listing div.box ul.task-list li .task-element.new-element{transform-origin:20% 0;transform:scaleY(0)}div.task-listing div.box .clear-box{text-align:center;border-top:solid 1px #ddd;background:#eceae8;padding:2px 0}div.task-listing div.box .clear-box .clear-all{text-decoration:none;color:#3e7da7}div.task-listing div.box .clear-box .clear-all:hover{text-decoration:underline;color:#0e5d91}div.task-listing div.box .empty-placeholder{width:100%;position:absolute;top:25px;padding:12px 20px;font-style:italic;color:#222}div.task-listing div.box .view-detail{display:none}div.task-listing.detail-view .box .task-list,div.task-listing.detail-view .box .clear-box{display:none}div.task-listing.detail-view .box .view-detail{display:block;position:relative}\\r\\n\\r\\n/*# sourceMappingURL=list.css.map */.task-manager-container{cursor:pointer;position:relative;width:40px;height:64px;background-color:transparent;padding:22px 8px 0px}.task-manager-container:hover{-webkit-transition:background-color 0.2s ease;-moz-transition:background-color 0.2s ease;-ms-transition:background-color 0.2s ease;-o-transition:background-color 0.2s ease;transition:background-color 0.2s ease;background-color:rgba(14,93,145,0.5);text-decoration:none}.dark-bar nav .settings-menu:hover ~ .persistent-menu .task-listing .box{box-shadow:none;border-color:#eee}.dark-bar nav .settings-menu:hover ~ .persistent-menu .task-listing .box .arrow{display:none}\\r\\n\\r\\n/*# sourceMappingURL=manager.css.map */');\n"]}